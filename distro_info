#!/usr/bin/env python3

import argparse
import requests
import sys
import os
import textwrap
import threading
import time
from io import BytesIO
from PIL import Image, UnidentifiedImageError
from bs4 import BeautifulSoup
from urllib.parse import quote, urljoin


class Scraper:
    ASCII_CHARS = list('ᐧ.+*:%@#o•■')
    WIDTH = os.get_terminal_size().columns
    BASE_URL = 'https://distrowatch.com'
    INFO_PATH = '/table.php?distribution='

    def __init__(self, search):
        self.search = quote(search)
        self._img = None

    @property
    def _soup(self):
        request = requests.get(self.BASE_URL + self.INFO_PATH + self.search)
        return BeautifulSoup(request.text, 'lxml')

    @property
    def table(self):
        return self._soup.find('td', class_='TablesTitle')

    def info(self):
        data = self.table.find_all('li')
        elems = [item.get_text().split(':') for item in data ]
        info = {item[0]: item[1].strip('\n') for item in elems}
        info.pop('Popularity', None)
        return info

    def description(self):
        return self.table.find('ul').next_sibling

    def img_converter(self):
        img = self.table.find('hr').next_sibling
        url = urljoin(self.BASE_URL, img['src'])
        size = self.WIDTH, self.WIDTH // 2
        response = requests.get(url)
        self._img = Image.open(BytesIO(response.content))
        self._img.convert('L')
        self._img.thumbnail(size)

    @property
    def _pixels(self):
        pixels = [pixel for pixel in list(self._img.getdata())]
        ascii_pixels = [self.ASCII_CHARS[pixel // 25] for pixel in pixels]
        return ''.join(ascii_pixel for ascii_pixel in ascii_pixels)

    def render_img(self):
        width = self._img.width
        rendered = [
            '|' + self._pixels[i:i + width] + '|' for i in range(
                0, 
                len(self._pixels), 
                int(width * 2)
            )
        ]
        edge = '-' * (width + 1) + '-\n'
        return edge + '\n'.join(rendered) + '\n' + edge



class App:
    BOLD = '\033[1m'
    BLUE = '\033[94m'
    YELLOW = '\033[93m'
    RED = '\033[31m'
    RESET = '\033[0m'
    WIDTH = os.get_terminal_size().columns

    def __init__(self, **kwargs):
        self.distro = args.distro or self.prompt()
        self.img_opt = args.image
        self.scraper = None

    def display(self):
        self.scraper = Scraper(self.distro)
        if not self.scraper.table:
            print(self.color(self.RED, 'Distro not found!'))
            sys.exit(0)
        if self.img_opt:
            self.display_img()
        for key, value in self.scraper.info().items():
            print(textwrap.fill(
                f'{self.color(key, self.BOLD, self.YELLOW)}: {value}',
                self.WIDTH
            )) 
        print()
        print(textwrap.fill(self.scraper.description(), self.WIDTH), end='\n\n')
        print(self.attribution())

    def display_img(self):
        try:
            self.scraper.img_converter()
            print(self.scraper.render_img())
        except (TypeError, UnidentifiedImageError):
            print(self.color(
                'Image could not be converted to ASCII',
                self.RED
            ), end='\n\n')

    def prompt(self):
        self.distro = input(
            self.color(
                'Search for a Linux distro/BSD: ',
                self.BLUE, 
                self.BOLD 
            )
        ).lower()
        return self.distro

    def color(self, s, *styles):
        style_list = [style for style in styles]
        return ''.join(style_list) + s + self.RESET

    @staticmethod
    def attribution():
        return 'All information provided by https://distrowatch.com'

    @staticmethod
    def waiting():
        chars = '|/-\\'
        for char in chars:
            print(char, end='\r')
            sys.stdout.write("\033[?25l")
            time.sleep(0.1)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'distro', 
        help='''
Specify a Linux/BSD distribution to query. If none is provided, distro-info
will launch in interactive mode.
        ''', 
        nargs='?', 
        default=None
    )
    parser.add_argument(
        '-i',
        '--image',
        help='Display ASCII representation distro logo',
        action='store_true'
    )
    args = parser.parse_args()
    app = App(**vars(args))
    try:
        display = threading.Thread(name='process', target=app.display)
        display.daemon = True
        display.start()
        while display.is_alive():
            app.waiting()
    except (KeyboardInterrupt, EOFError):
        print()
        print(app.color('Goodbye!', app.RED))
        sys.exit(0)
    finally:
        sys.stdout.write("\033[?25h")


if __name__ == '__main__':
    main()
